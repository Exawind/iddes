===============================================================================
                                  Nalu-Wind                                    
       An incompressible, turbulent computational fluid dynamics solver        
                  for wind turbine and wind farm simulations                   
===============================================================================

   Nalu-Wind Version: v1.2.0
   Nalu-Wind GIT Commit SHA: a305b1501a6dd283b59ca5ee9b035ec73b756b2e
   Trilinos Version: 13.1-g83a0e3b

   TPLs: Boost, HDF5, netCDF, STK, Trilinos, yaml-cpp and zlib   
   Optional TPLs enabled: OpenFAST, Hypre
   Copyright 2017 National Technology & Engineering Solutions of Sandia, LLC   
   (NTESS), National Renewable Energy Laboratory, University of Texas Austin,  
    Northwest Research Associates. Under the terms of Contract DE-NA0003525    
    with NTESS, the U.S. Government retains certain rights in this software.   
                                                                               
           This software is released under the BSD 3-clause license.           
   See LICENSE file at https://github.com/exawind/nalu-wind for more details.  
-------------------------------------------------------------------------------


Realm Options Review: realm_1
===========================
Edge-based scheme will be activated
Nalu will deactivate aura ghosting

Turbulence Model Review:   
===========================
Turbulence Model is: sst_iddes 1

PPE review:   
===========================
Realm::create_mesh(): Begin
Realm::create_mesh() End

Boundary Condition Review: 
===========================
Wall BC name:        bc_wall on cylinder
Inflow BC name:      bc_inflow on inlet
Open BC name:        bc_open on outlet
Symmetry BC name:    bc_symSides on sides

Initial Condition Review:  
===========================
Initial Is Type constant 

Material Prop Review:      
===========================
density is a constant property: 1.225
viscosity is a constant property: 1.8375e-05

EqSys/options Review:      
===========================
Edge projected nodal gradient for minimum distance to wall: 1
Edge projected nodal gradient for velocity: 0
Edge projected nodal gradient for pressure: 0
Edge projected nodal gradient for turbulent_ke: 0
Edge projected nodal gradient for specific_dissipation_rate: 0

Realm memory Review:       realm_1
===========================
Node count from meta data = 4181659
Total memory estimate for Matrix solve (per core)= 0.085435 GB.
Total memory estimate (per core) = 0.085435 GB.

Time Integrator Review:  
=========================
StandardTimeIntegrator 
 name=              ti_1
 second order =     1
 maxTimeStepCount = 30000
 fixed time step is active   with time step: 0.003
StandardTimeIntegrator realm_name[0]= realm_1

Transfer Review:         
=========================
Realm::initialize() Begin 
Created algorithm = Alg0000_elem_HEXAHEDRON_8_geometry
Created algorithm = Alg0000_edge_nodal_grad
Created algorithm = Alg0000_elem_HEXAHEDRON_8_courant_reynolds
Created algorithm = Alg0000_elem_HEXAHEDRON_8_momentum_nodal_grad
Created algorithm = Alg0000_elem_HEXAHEDRON_8_continuity_nodal_grad
Created algorithm = Alg0000_edge_mdot_edge_interior
Created algorithm = Alg0000_elem_HEXAHEDRON_8_tke_nodal_grad
Created algorithm = Alg0000_elem_HEXAHEDRON_8_sdr_nodal_grad
Created algorithm = Alg0000_elem_WEDGE_6_geometry
Created algorithm = Alg0000_elem_WEDGE_6_courant_reynolds
Created algorithm = Alg0000_elem_WEDGE_6_momentum_nodal_grad
Created algorithm = Alg0000_elem_WEDGE_6_continuity_nodal_grad
Created algorithm = Alg0000_elem_WEDGE_6_tke_nodal_grad
Created algorithm = Alg0000_elem_WEDGE_6_sdr_nodal_grad
Created algorithm = Alg0001_face_QUADRILATERAL_4_geometry
Created algorithm = Alg0003_face_QUADRILATERAL_4_nodal_grad
Created algorithm = Alg0003_face_QUADRILATERAL_4_momentum_nodal_grad
Created algorithm = Alg0003_face_QUADRILATERAL_4_continuity_nodal_grad
Created algorithm = Alg0003_face_QUADRILATERAL_4_HEXAHEDRON_8_sst_geometry_wall
Created algorithm = Alg0003_face_QUADRILATERAL_4_tke_nodal_grad
Created algorithm = Alg0003_face_QUADRILATERAL_4_HEXAHEDRON_8_sdr_wall_func
Created algorithm = Alg0003_face_QUADRILATERAL_4_sdr_nodal_grad
Created algorithm = Alg0002_face_QUADRILATERAL_4_nodal_grad
Created algorithm = Alg0002_face_QUADRILATERAL_4_momentum_nodal_grad
Created algorithm = Alg0002_face_QUADRILATERAL_4_continuity_nodal_grad
Created algorithm = Alg0002_face_QUADRILATERAL_4_mdot_inflow
Created the following bc face alg: ContinuityEQS_inflow_AssembleElemSolverAlg_QUADRILATERAL_4
Created algorithm = Alg0002_face_QUADRILATERAL_4_tke_nodal_grad
Created algorithm = Alg0002_face_QUADRILATERAL_4_sdr_nodal_grad
Created algorithm = Alg0005_face_QUADRILATERAL_4_nodal_grad
Created algorithm = Alg0005_face_QUADRILATERAL_4_momentum_nodal_grad
Created the following bc face/elem alg: MomentumEQS_open_AssembleFaceElemSolverAlg_QUADRILATERAL_4_HEXAHEDRON_8
Created algorithm = Alg0005_face_QUADRILATERAL_4_HEXAHEDRON_8_continuity_nodal_grad
Created algorithm = Alg0005_face_QUADRILATERAL_4_HEXAHEDRON_8_mdot_open_edge
Created the following bc face/elem alg: ContinuityEQS_open_edge_AssembleFaceElemSolverAlg_QUADRILATERAL_4_HEXAHEDRON_8
Created algorithm = Alg0005_face_QUADRILATERAL_4_tke_nodal_grad
Created the following bc face alg: TurbKineticEnergyEQS_open_AssembleElemSolverAlg_QUADRILATERAL_4
Created algorithm = Alg0005_face_QUADRILATERAL_4_sdr_nodal_grad
Created the following bc face alg: SpecDissRateEQS_open_AssembleElemSolverAlg_QUADRILATERAL_4
Created the following bc face/elem alg: MomentumEQS_open_AssembleFaceElemSolverAlg_QUADRILATERAL_4_WEDGE_6
Created algorithm = Alg0005_face_QUADRILATERAL_4_WEDGE_6_continuity_nodal_grad
Created algorithm = Alg0005_face_QUADRILATERAL_4_WEDGE_6_mdot_open_edge
Created the following bc face/elem alg: ContinuityEQS_open_edge_AssembleFaceElemSolverAlg_QUADRILATERAL_4_WEDGE_6
Created algorithm = Alg0008_face_QUADRILATERAL_4_nodal_grad
Created algorithm = Alg0008_face_QUADRILATERAL_4_momentum_nodal_grad
Created the following bc face/elem alg: MomentumEQS_symm_edge_AssembleFaceElemSolverAlg_QUADRILATERAL_4_HEXAHEDRON_8
Created algorithm = Alg0008_face_QUADRILATERAL_4_continuity_nodal_grad
Created algorithm = Alg0008_face_QUADRILATERAL_4_tke_nodal_grad
Created algorithm = Alg0008_face_QUADRILATERAL_4_sdr_nodal_grad
Created the following bc face/elem alg: MomentumEQS_symm_edge_AssembleFaceElemSolverAlg_QUADRILATERAL_4_WEDGE_6
Created algorithm = Alg0001_face_TRIANGLE_3_geometry
Created algorithm = Alg0008_face_TRIANGLE_3_nodal_grad
Created algorithm = Alg0008_face_TRIANGLE_3_momentum_nodal_grad
Created the following bc face/elem alg: MomentumEQS_symm_edge_AssembleFaceElemSolverAlg_TRIANGLE_3_WEDGE_6
Created algorithm = Alg0008_face_TRIANGLE_3_continuity_nodal_grad
Created algorithm = Alg0008_face_TRIANGLE_3_tke_nodal_grad
Created algorithm = Alg0008_face_TRIANGLE_3_sdr_nodal_grad
the post processing type is surface
the post processing file name: forces01.dat
the post processing physics name: surface_force_and_moment
Target name(s): cylinder
Parameters used are: 0
Parameters used are: 0

Averaging Review: one
===========================
Primitive/Reynolds name: density/density_ra_one size 1
Primitive/Reynolds name: velocity/velocity_ra_one size 3
Vorticity will be computed; add vorticity to output
Q criterion will be computed; add q_criterion to output
===========================
Realm::ioBroker_->populate_mesh() Begin
Realm::ioBroker_->populate_mesh() End
Realm::create_edges(): Nalu Realm: realm_1 requires edge creation: Begin
Realm::create_edges(): Nalu Realm: realm_1 requires edge creation: End
Realm::ioBroker_->populate_field_data() Begin
Realm::ioBroker_->populate_field_data() End
Realm::create_output_mesh(): Begin
 Sorry, no field by the name alpha_upw
 Sorry, no field by the name iblank_cell
 Sorry, no field by the name mesh_displacement
Realm::create_output_mesh() End
 DualNodalVolume min: 5.21846e-08 max: 49.5863 total: 1.38172e+06
EquationSystems::initialize(): Begin 
EquationSystems::initialize(): End 

Realm memory Review:       realm_1
===========================
Total memory estimate for Matrix solve (per core)= 0.085435 GB.
Total memory estimate for Fields (per core)= 0.00830684 GB.
Total memory estimate (per core) = 0.0937418 GB.
Realm::initialize() End 

*******************************************************
Simulation Shall Commence: number of processors = 384
